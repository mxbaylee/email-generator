<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.oss.mxbaylee</string>
	<key>connections</key>
	<dict>
		<key>A2D8264A-E886-4FEE-864A-9364DBFBFE5B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F1CF4615-56FA-4E33-9025-466F5E98CCFA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F1CF4615-56FA-4E33-9025-466F5E98CCFA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>80220667-6FB2-4A35-9BA6-EA6768B6101B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Mx Baylee</string>
	<key>description</key>
	<string>Just a playground for experimental workflows.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Email Generator</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>email</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string># query="$(echo '{query}' | sed -r 's/https{0,1}:\/\/(www.){0,1}//' | sed 's/\..*$//')"
query=$(URL='{query}' python3 domain.py)

small=$(openssl rand -hex 100 | head --bytes 6)
med=$(openssl rand -hex 100 | head --bytes 10)
large=$(openssl rand -hex 100 | head --bytes 15)

echo -n '{"items": [{"title":"Small Size","subtitle":"'$query'.'${small}'@'${domain}'", "arg":"'$query'.'${small}'@'${domain}'"}, {"title":"Medium Size","subtitle":"'$query'.'${med}'@'${domain}'", "arg":"'$query'.'${med}'@'${domain}'"}, {"title":"Large Size","subtitle":"'$query'.'${large}'@'${domain}'", "arg":"'$query'.'${large}'@'${domain}'"}]}'</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>A2D8264A-E886-4FEE-864A-9364DBFBFE5B</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>transient</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>F1CF4615-56FA-4E33-9025-466F5E98CCFA</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string># Based On "Alfred Emoji" workflow
# https://github.com/jsumners/alfred-emoji

# THESE VARIABLES MUST BE SET.
readonly github_repo='mxbaylee/email-generator'
readonly frequency_check='1' # days

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
readonly info_plist='info.plist'

function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function notification {
  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

function fetch_remote_version {
  curl --silent "https://api.github.com/repos/${github_repo}/releases/latest" | grep 'tag_name' | head -1 | sed -E 's/.*tag_name": "v?(.*)".*/\1/'
}

function fetch_download_url {
  curl --silent "https://api.github.com/repos/${github_repo}/releases/latest" | grep 'browser_download_url.*\.alfredworkflow"' | head -1 | sed -E 's/.*browser_download_url": "(.*)".*/\1/'
}

function download_and_install {
  readonly tmpfile="$(mktemp).alfredworkflow"
  notification 'Downloading and installing‚Ä¶'
  curl --silent --location --output "${tmpfile}" "${1}"
  open "${tmpfile}"
}

# Local sanity checks
[[ -n "${alfred_workflow_version}" ]] || abort "'alfred_workflow_version' must be set."
[[ -n "${alfred_workflow_name}" ]] || abort "'alfred_workflow_name' must be set."
[[ "${github_repo}" =~ ^.+\/.+$ ]] || abort "'github_repo' (${github_repo}) must be in the format 'username/repo'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) must be a number."

# Check for updates
if [[ $(find "${info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if [[ "${alfred_workflow_version}" == "$(fetch_remote_version)" ]]; then
    touch "${info_plist}" # Reset timer by touching local file
    exit 0
  fi

  download_and_install "$(fetch_download_url)"
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>80220667-6FB2-4A35-9BA6-EA6768B6101B</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>![icon](./icon.png)

## üíå Email Generator

This package is used to generate more unique email addresses for wildcard domains based on an input text and some random hashes.
For example:

`&gt; email google.com`

Will give you 3 size email addresses:

*  google.3b0094@example.com
*  google.672667003b@example.com
*  google.6dc6da300a6526a@example.com

You can pass in

* Name of a website like `google`
* Full or partial domains `calendar.google.com`
* Full URL `https://docs.google.com/spreadsheets/d/1SAAAk0A_kO4CAAAp-rcpwlRC7AAAAq3qwrIldc/edit#gid=1940831276`

## Installing

* Download the latest [release](https://github.com/mxbaylee/email-generator/releases).
* Be sure to set the `domain` value.
    * Click "Configure Workflow..."
    * Update `domain` with your wildcard domain name.</string>
	<key>uidata</key>
	<dict>
		<key>80220667-6FB2-4A35-9BA6-EA6768B6101B</key>
		<dict>
			<key>note</key>
			<string>Auto Update - remove to disable</string>
			<key>xpos</key>
			<real>575</real>
			<key>ypos</key>
			<real>155</real>
		</dict>
		<key>A2D8264A-E886-4FEE-864A-9364DBFBFE5B</key>
		<dict>
			<key>colorindex</key>
			<integer>11</integer>
			<key>xpos</key>
			<real>165</real>
			<key>ypos</key>
			<real>155</real>
		</dict>
		<key>F1CF4615-56FA-4E33-9025-466F5E98CCFA</key>
		<dict>
			<key>colorindex</key>
			<integer>11</integer>
			<key>xpos</key>
			<real>375</real>
			<key>ypos</key>
			<real>155</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>example.com</string>
				<key>placeholder</key>
				<string>example.com</string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>The domain used at the end of the email</string>
			<key>label</key>
			<string>üï∏Ô∏è Domain</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>domain</string>
		</dict>
	</array>
	<key>version</key>
	<string>1.0.4</string>
	<key>webaddress</key>
	<string>https://github.com/mxbaylee</string>
</dict>
</plist>
